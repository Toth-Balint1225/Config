#+TITLE: Personal Emacs config based on DT's video
#+AUTHOR: Tóth Bálint

* Basics
    Important: you must have this snippet of code in your `init.el'!
      (org-babel-load-file
      (expand-file-name
	  "config.org"
	  user-emacs-directory))

* Autosave
  #+begin_src emacs-lisp
    (setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
  #+end_src
* Package management
** MELPA
  This section is the setup of MELPA for package.el.
  
  #+begin_src emacs-lisp
     (require 'package)
     (add-to-list 'package-archives
		  '("melpa" . "https://melpa.org/packages/"))
     (package-initialize)
  #+end_src
** refresh packages
   Commented out for startup speed gain. Sould be turned back on when installing a new plugin.
   #+begin_src emacs-lisp
	 ;; refresh package.el
	 (package-refresh-contents)
   #+end_src
** use-package
  An EMACS plugin for easier package management.
  From now on, packages can be installed with :
  #+begin_src emacs-lisp
    (unless (package-installed-p
	     'use-package)
    (package-install 'use-package))
  #+end_src
  
* Evil Mode
** Basics
  Setup for evil mode and evil collection so evil keycoords can be used in other plugins
  #+begin_src emacs-lisp
	 (use-package evil
			 :ensure t ;install evil if not installed
			 :init     ;manipulate evil's config
			 (setq evil-want-integration t)    ;default btw
			 (setq evil-want-keybinding nil)   
			 (setq evil-vsplit-window-right t) ; splits
			 (setq evil-split-window-below t)
			 (evil-mode))
	(use-package evil-collection
		 :after evil
		 :ensure t
		 :config
		 (evil-collection-init))
  #+end_src
** The fabulous jk escape
#+begin_src emacs-lisp
  (use-package key-chord
	:ensure t)

  (setq key-chord-two-keys-delay 0.2)
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  (key-chord-mode 1)
#+end_src
* Look and feel
** Welcome Screen
   Turning off the welcome screen
   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
   #+end_src
** Theme
  The doom emacs theme pack.
  #+begin_src emacs-lisp
    (use-package doom-themes
      :ensure t)
    ;; enable some bold and italic font-faces
    (setq doom-themes-enable-bold t 
      doom-themes-enable-italic t)
  #+end_src
  | Name                              | Description                                                                                          |
  |-----------------------------------+------------------------------------------------------------------------------------------------------|
  | doom-1337                         | ported from VSCode's 1337 Theme                                                                      |
  | doom-acario-dark                  | an original dark theme (thanks to gagbo)                                                             |
  | doom-acario-light                 | an original light theme (thanks to gagbo)                                                            |
  | doom-ayu-mirage                   | Dark variant from Ayu themes (thanks to LoveSponge)                                                  |
  | doom-ayu-light                    | Light variant from Ayu themes(thanks to LoveSponge)                                                  |
  | doom-badger                       | Based on original Badger theme                                                                       |
  | doom-challenger-deep              | based on Vim's Challenger deep theme (thanks to fuxialexander)                                       |
  | doom-city-lights                  | based on Atom's City lights (thanks to fuxialexander)                                                |
  | doom-dark+                        | ported from VS Code's Dark+ theme (thanks to ema2159)                                                |
  | doom-dracula                      | an implementation of Dracula theme (thanks to fuxialexander)                                         |
  | doom-ephemeral                    | inspired in the Ephemeral Theme from elenapan's dotfiles (thanks to karetsu)                         |
  | doom-fairy-floss                  | a candy colored Sublime theme by sailorhg (thanks to ema2159)                                        |
  | doom-flatwhite                    | a unique light theme ported from Flatwhite Syntax (thanks to ShaneKilkelly)                          |
  | doom-gruvbox-light                | adapted from Morhetz's Gruvbox light variant (thanks for jsoa)                                       |
  | doom-gruvbox                      | adapted from Morhetz's Gruvbox (thanks to JongW)                                                     |
  | doom-henna                        | based on VS Code's Henna (thanks to jsoa)                                                            |
  | doom-homage-black                 | dark variant of doom-homage white. (thanks to mskorzhinskiy)                                         |
  | doom-homage-white                 | a minimalistic, colorless theme, inspired by eziam, tao and jbeans themes. (thanks to mskorzhinskiy) |
  | doom-horizon                      | ported from VS Code's Horizon (thanks to karetsu)                                                    |
  | doom-Iosvkem                      | adapted from Iosvkem (thanks to neutaaaaan)                                                          |
  | doom-ir-black                     | Port of VIM's IR_Black color scheme (thanks to legendre6891)                                         |
  | doom-laserwave                    | a clean 80's synthwave / outrun theme inspired by VS Code's laserwave (thanks to hyakt)              |
  | doom-manegarm                     | an original autumn-inspired dark theme (thanks to kenranunderscore)                                  |
  | doom-material                     | adapted from Material Themes (thanks to tam5)                                                        |
  | doom-miramare                     | a port of Franbach's Miramare, a variant of gruvbox theme (thanks to sagittaros)                     |
  | doom-molokai                      | a theme based on Texmate's Monokai                                                                   |
  | doom-monokai-classic              | port of Monokai's Classic variant (thanks to ema2159)                                                |
  | doom-monokai-pro                  | port of Monokai's Pro variant (thanks to kadenbarlow)                                                |
  | doom-monokai-machine              | port of Monokai's Pro (Machine) variant (thanks to minikN)                                           |
  | doom-monokai-octagon              | port of Monokai's Pro (Octagon) variant (thanks to minikN)                                           |
  | doom-monokai-ristretto            | port of Monokai's Pro (Ristretto) variant (thanks to minikN)                                         |
  | doom-monokai-spectrum             | port of Monokai's Pro (Spectrum) variant (thanks to minikN)                                          |
  | doom-moonlight                    | ported from VS Code's Moonlight Theme (thanks to Brettm12345)                                        |
  | doom-nord-light                   | light variant of Nord (thanks to fuxialexander)                                                      |
  | doom-nord                         | dark variant of Nord (thanks to fuxialexander)                                                       |
  | doom-nova                         | adapted from Nova (thanks to bigardone)                                                              |
  | doom-oceanic-next                 | adapted from Oceanic Next theme (thanks to juanwolf)                                                 |
  | doom-old-hope                     | based on An Old Hope theme (thanks to teesloane)                                                     |
  | doom-opera-light                  | an original light theme (thanks to jwintz)                                                           |
  | doom-opera                        | an original dark theme (thanks to jwintz)                                                            |
  | doom-outrun-electric              | a neon colored theme inspired in VS Code's Outrun Electric (thanks to ema2159)                       |
  | doom-palenight                    | adapted from Material Themes (thanks to Brettm12345)                                                 |
  | doom-peacock                      | based on Peacock from daylerees' themes (thanks to teesloane)                                        |
  | doom-plain-dark                   | based on plain (thanks to das-s)                                                                     |
  | doom-plain                        | based on plain (thanks to mateossh)                                                                  |
  | doom-rouge                        | ported from VSCode's Rouge Theme (thanks to JordanFaust)                                             |
  | doom-shades-of-purple             | a purple and vibrant theme inspired by VSCode's Shades of Purple (thanks to [jwbaldwin])             |
  | doom-snazzy                       | a dark theme inspired in Atom's Hyper Snazzy (thanks to ar1a)                                        |
  | doom-solarized-dark               | dark variant of Solarized (thanks to ema2159)                                                        |
  | doom-solarized-dark-high-contrast | high contrast dark variant of Solarized (thanks to jmorag)                                           |
  | doom-solarized-light              | light variant of Solarized (thanks to fuxialexander)                                                 |
  | doom-sourcerer                    | based on Sourcerer (thanks to defphil)                                                               |
  | doom-spacegrey                    | I'm sure you've heard of it (thanks to teesloane)                                                    |
  | doom-tomorrow-day                 | Tomorrow's light variant (thanks to emacswatcher)                                                    |
  | doom-tomorrow-night               | one of the dark variants of Tomorrow (thanks to emacswatcher)                                        |
  | doom-wilmersdorf                  | port of Ian Pan's Wilmersdorf (thanks to ema2159)                                                    |
  | doom-xcode                        | Based off of Apple's Xcode Dark theme (thanks to kadenbarlow)                                        |
  | doom-zenburn                      | port of the popular Zenburn theme (thanks to jsoa)                                                   |
  Set the theme:
  #+begin_src emacs-lisp
	(load-theme 'doom-one t)
  #+end_src
** Fonts
  A nice font
  #+begin_src emacs-lisp
    (set-face-attribute 'default nil
	:font "Ubuntu Mono Nerd Font 11"
	:weight 'medium)
    (set-face-attribute 'variable-pitch nil
	:font "Ubuntu 11"
	:weight 'medium)
    (set-face-attribute 'fixed-pitch nil
	:font "Ubuntu Mono NerdFont 11"
	:weight 'medium)

    (add-to-list 'default-frame-alist '(font . "Ubuntu Mono Nerd Font 11"))
  #+end_src
  
** Bars
  Disabling the srcoll-, menu-, toolbar
  #+begin_src emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
  #+end_src
** Zoom
  Keybindings for zooming
  C-+ zoom in
  C-- zoom out
  C-mouseWheel
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-+") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
    (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
  #+end_src
  
** Lines
   Line numbers and line truncation
   #+begin_src emacs-lisp
     ;; numbers
     (global-display-line-numbers-mode)
   #+end_src
** Mode line
   The doom emacs mode line properly stolen
   #+begin_src emacs-lisp
	  (use-package doom-modeline
	    :ensure t)
          (setq doom-modeline-height 11)
	  (doom-modeline-mode 1)
     ;; set the height so it doesn't take up half the screen
   #+end_src
** Prettify Symbols
   Character replacements for some programming languages
   Hook used at Haskell settings [[*Prettify Symbols hook][here]]
   #+begin_src emacs-lisp
     (defun my/interactive-haskell-mode/load-prettify-symbols ()
       (interactive)
       (setq prettify-symbols-alist
		       '(("->" . ?→)
			("=>" . ?⇒)
			("<-" . ?←)
			("/=" . ?≠)
			("\\" .  ?λ)))
       (prettify-symbols-mode 1))

   #+end_src
** Parenthesis
   Set the parenthesis highlighting to always display.
   #+begin_src emacs-lisp
    (show-paren-mode)
   #+end_src
** Indentation
   The indentation style of all C related files
   Convention:
   - Java style
   - Tab width is 4
   - Tabs instead of spaces (no expandtab)
   #+begin_src emacs-lisp
	 (setq-default c-basic-offset 4
				   tab-width 4
				   indent-tabs-mode 4
				   c-default-style "bsd")
   #+end_src
* Which key
  Helper buffer that shows the keybindings
  #+begin_src emacs-lisp
    (use-package which-key
      :ensure t)
    (which-key-mode)
  #+end_src

* Neotree
** Set to default directory editor
   By setting C-x d to neotree-dir form dired, we get a nice graphical thingy.
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x d") 'neotree-dir)
   #+end_src
** All the icons
   Some nice icons for neotree
   #+begin_src emacs-lisp
	  (require 'all-the-icons)
     (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
   #+end_src
** Evil keybindings
   |---------+---------------------|
   | key     | action              |
   |---------+---------------------|
   | "tab"   | enters neotree      |
   |---------+---------------------|
   | "space" | quick-look          |
   |---------+---------------------|
   | "q"     | hides neotree       |
   |---------+---------------------|
   | "A"     | strech              |
   |---------+---------------------|
   | "H"     | toggle hidden files |
   |---------+---------------------|
   | "g"     | refresh             |
   |---------+---------------------|

   #+begin_src emacs-lisp
     (add-hook 'neotree-mode-hook
			    (lambda ()
			    (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
			    (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
			    (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
			    (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
			    (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
			    (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
			    (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
			    (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
			    (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))


   #+end_src
* Haskell mode
** Prettify Symbols hook
   Actually using the prettify symbols definitions for haskell
   #+begin_src emacs-lisp
     (add-hook 'interactive-haskell-mode-hook 'my/interactive-haskell-mode/load-prettify-symbols)
   #+end_src
** Interactive Haskell mode hook
   Automatically turning on interactive haskell mode upon starting haskell mode
   #+begin_src emacs-lisp
     (defun my/haskell-mode/turn-on-interactive ()
       (interactive-haskell-mode 1))
     (add-hook 'haskell-mode-hook 'my/haskell-mode/turn-on-interactive)
   #+end_src
* LSP mode & setup
  Language Server Protocol for different languages.
  - Rust: rust-analyzer, use [[https://robert.kra.hn/posts/rust-emacs-setup/#lsp-mode-and-lsp-ui-mode][this link]] to install it.
  - C / C++
  - Java

  Installing LSP mode.
  #+begin_src emacs-lisp
	(use-package lsp-mode
	  :ensure t
	  :commands (lsp lsp-deferred)
	  :init
	  (setq lsp-keymap-prefix "C-c l")
	  :custom
	  (lsp-rust-analyzer-server-display-inlay-hints t)
	  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
	  (lsp-rust-analyzer-display-chaining-hints t)
	  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
	  (lsp-rust-analyzer-display-closure-return-type-hints t)
	  (lsp-rust-analyzer-display-parameter-hints nil)
	  (lsp-rust-analyzer-display-reborrow-hints nil)
	  :config
	  (lsp-enable-which-key-integration t))
  #+end_src
** Set rust server
   #+begin_src emacs-lisp
	 (setq lsp-rust-server 'rust-analyzer)
   #+end_src
* Rust mode
** Install
   Rust mode supports cargo, rustc and other QoL stuff
   #+begin_src emacs-lisp
	 (use-package rustic
	   :hook (rustic . lsp-deferred)
	   :ensure t)

	 (add-hook 'rustic-hook
			   (lambda ()
				 (setq indent-tabs-mode nil)
				 (unless buffer-file-name
				   (setq-local buffer-save-without-query))))

   #+end_src

* Compilation
  Let C-c C-c run the compile command in c and c++ modes.

#+begin_src emacs-lisp
  (add-hook 'c-mode-hook
			(lambda ()
			  (local-set-key (kbd "C-c C-c") 'compile)))
  (add-hook 'c++-mode-hook
			(lambda ()
			  (local-set-key (kbd "C-c C-c") 'compile)))
#+end_src
* Org mode
** Org babel
   Creating some compile functions for common languages.
   #+begin_src emacs-lisp
	 (org-babel-do-load-languages
	  'org-babel-load-languages
	  '((emacs-lisp . t)
		(shell . t)))
   #+end_src
* Magit
** Installation
  The magit interactive git client
  Using the evil collection keybindings
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :after evil
      :init
      (evil-collection-init))
  #+end_src

** Custom keybinding setup
   C-x g is a common way of setting this up, so I use it.
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x g") 'magit-status)
   #+end_src
   
* Autocomplete
** Base autocompletion
Install autocomplete mode.
#+begin_src emacs-lisp
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :init
  ;;   (progn
  ;; 	(ac-config-default)
  ;; 	(global-auto-complete-mode t)))

  (use-package company
	:ensure t
	:after lsp-mode
	:hook (lsp-mode . company-mode)
	:bind
	(:map company-active-map
		  ("<tab>" . company-complete-selection))
	(:map lsp-mode-map
		  ("<tab>" . company-indent-or-complete-common))
	:config
	(setq company-idle-delay 0)
	(setq company-minimum-prefix-length 3)
	(global-company-mode t))
#+end_src
** Irony-mode: advanced C/C++ autocompletion

#+begin_src emacs-lisp
  (use-package company-irony
	:ensure t
	:config
	(add-to-list 'company-backends 'company-irony))
  (use-package irony
	:ensure t
	:config
	(add-hook 'c++-mode-hook 'irony-mode)
	(add-hook 'c-mode-hook 'irony-mode)
	(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+end_src
